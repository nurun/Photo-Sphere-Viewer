{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/SettingsButton.js","../../src/plugins/settings/index.js"],"sourcesContent":["import { AbstractButton, CONSTANTS } from 'photo-sphere-viewer';\r\nimport SettingsPlugin from './index';\r\nimport icon from './settings.svg';\r\n\r\n/**\r\n * @summary Navigation bar settings button class\r\n * @extends PSV.buttons.AbstractButton\r\n * @memberof PSV.buttons\r\n */\r\nexport class SettingsButton extends AbstractButton {\r\n\r\n  static id = 'settings';\r\n  static icon = icon;\r\n\r\n  /**\r\n   * @param {PSV.components.Navbar} navbar\r\n   */\r\n  constructor(navbar) {\r\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\r\n\r\n    /**\r\n     * @type {PSV.plugins.SettingsPlugin}\r\n     * @private\r\n     * @readonly\r\n     */\r\n    this.plugin = this.psv.getPlugin(SettingsPlugin.id);\r\n\r\n    if (this.plugin) {\r\n      this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\r\n      this.psv.on(CONSTANTS.EVENTS.CLOSE_PANEL, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\r\n    this.psv.off(CONSTANTS.EVENTS.CLOSE_PANEL, this);\r\n\r\n    delete this.plugin;\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  isSupported() {\r\n    return !!this.plugin;\r\n  }\r\n\r\n  /**\r\n   * @summary Handles events\r\n   * @param {Event} e\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    /* eslint-disable */\r\n    switch (e.type) {\r\n      // @formatter:off\r\n      case CONSTANTS.EVENTS.OPEN_PANEL:  this.toggleActive(e.args[0] === SettingsPlugin.ID_PANEL); break;\r\n      case CONSTANTS.EVENTS.CLOSE_PANEL: this.toggleActive(false); break;\r\n      // @formatter:on\r\n    }\r\n    /* eslint-enable */\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @description Toggles settings\r\n   */\r\n  onClick() {\r\n    this.plugin.toggleSettings();\r\n  }\r\n\r\n}\r\n","import { AbstractPlugin, DEFAULTS, PSVError, registerButton, utils } from 'photo-sphere-viewer';\r\nimport check from './check.svg';\r\nimport chevron from './chevron.svg';\r\nimport icon from './settings.svg';\r\nimport { SettingsButton } from './SettingsButton';\r\nimport './style.scss';\r\nimport switchOff from './switch-off.svg';\r\nimport switchOn from './switch-on.svg';\r\n\r\n\r\n// add settings button\r\nDEFAULTS.navbar.splice(DEFAULTS.navbar.indexOf('fullscreen'), 0, SettingsButton.id);\r\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\r\nregisterButton(SettingsButton);\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\r\n * @summary Description of a setting\r\n * @property {string} id - identifier of the setting\r\n * @property {string} label - label of the setting\r\n * @property {'options' | 'toggle'} type - type of the setting\r\n */\r\n\r\n/**\r\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\r\n * @summary Description of a 'options' setting\r\n * @property {'options'} type - type of the setting\r\n * @property {function} current - function which returns the current value (human readable)\r\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\r\n * @property {function} apply - function called with the id of the selected option\r\n */\r\n\r\n/**\r\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\r\n * @summary Description of a 'toggle' setting\r\n * @property {'toggle'} type - type of the setting\r\n * @property {function} active - function which return whereas the setting is active or not\r\n * @property {function} toggle - function called when the setting is toggled\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\r\n * @summary Option of an 'option' setting\r\n * @property {string} id - identifier of the option\r\n * @property {string} label - label of the option\r\n * @property {boolean} active - state of the option\r\n */\r\n\r\n/**\r\n * @summary Adds a button to access various settings.\r\n * @extends PSV.plugins.AbstractPlugin\r\n * @memberof PSV.plugins\r\n */\r\nexport default class SettingsPlugin extends AbstractPlugin {\r\n\r\n  static id = 'settings';\r\n\r\n  /**\r\n   * @summary Panel identifier for settings content\r\n   * @type {string}\r\n   * @constant\r\n   */\r\n  static ID_PANEL = 'settings';\r\n\r\n  /**\r\n   * @summary Property name added to settings items\r\n   * @type {string}\r\n   * @constant\r\n   */\r\n  static SETTING_DATA = 'settingId';\r\n\r\n  /**\r\n   * @summary Settings list template\r\n   * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\r\n   * @param {string} title\r\n   * @param {string} dataKey\r\n   * @returns {string}\r\n   */\r\n  static SETTINGS_TEMPLATE = (settings, title, dataKey) => `\r\n<h1 class=\"psv-settings-title\">${icon} ${title}</h1>\r\n<ul class=\"psv-settings-list\">\r\n  ${settings.map(s => `\r\n    <li class=\"psv-settings-item\" data-${dataKey}=\"${s.id}\">\r\n      ${SettingsPlugin.SETTINGS_TEMPLATE_[s.type](s)}\r\n    </li>\r\n  `).join('')}\r\n</ul>`;\r\n\r\n  /**\r\n   * @summary Setting item template, by type\r\n   */\r\n  static SETTINGS_TEMPLATE_ = {\r\n    options: setting => `\r\n      <span class=\"psv-settings-item-label\">${setting.label}</span> \r\n      <span class=\"psv-settings-item-value\">${setting.current()}</span> \r\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\r\n    `,\r\n    toggle : setting => `\r\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\r\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\r\n    `,\r\n  };\r\n\r\n  /**\r\n   * @summary Settings options template\r\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\r\n   * @param {string} title\r\n   * @param {string} dataKey\r\n   * @returns {string}\r\n   */\r\n  static SETTING_OPTIONS_TEMPLATE = (setting, title, dataKey) => `\r\n<h1 class=\"psv-settings-title\">${icon} ${title}</h1>\r\n<ul class=\"psv-settings-list\">\r\n  <li class=\"psv-settings-item psv-settings-item--header\" data-${dataKey}=\"__back\">\r\n    <span class=\"psv-settings-item-icon\">${chevron}</span>\r\n    <span class=\"psv-settings-item-label\">${setting.label}</span>\r\n  </li>\r\n  ${setting.options().map(s => `\r\n    <li class=\"psv-settings-item\" data-${dataKey}=\"${s.id}\">\r\n      <span class=\"psv-settings-item-icon\">${s.active ? check : ''}</span>\r\n      <span class=\"psv-settings-item-value\">${s.label}</span>\r\n    </li>\r\n  `).join('')}\r\n</ul>`;\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   */\r\n  constructor(psv) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\r\n     * @private\r\n     */\r\n    this.settings = [];\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @summary Registers a new setting\r\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\r\n   */\r\n  addSetting(setting) {\r\n    if (!setting.id) {\r\n      throw new PSVError('Missing setting id');\r\n    }\r\n    if (!setting.type) {\r\n      throw new PSVError('Missing setting type');\r\n    }\r\n    if (!SettingsPlugin.SETTINGS_TEMPLATE_[setting.type]) {\r\n      throw new PSVError('Unsupported setting type');\r\n    }\r\n\r\n    this.settings.push(setting);\r\n\r\n    if (this.psv.panel.prop.contentId === SettingsPlugin.ID_PANEL) {\r\n      this.showSettings();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Removes a setting\r\n   * @param {string} id\r\n   */\r\n  removeSetting(id) {\r\n    let idx = -1;\r\n    // FIXME use findIndex, one day, when IE11 is totally dead\r\n    this.settings.some((setting, i) => {\r\n      if (setting.id === id) {\r\n        idx = i;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    if (idx !== -1) {\r\n      this.settings.splice(idx, 1);\r\n\r\n      if (this.psv.panel.prop.contentId === SettingsPlugin.ID_PANEL) {\r\n        this.showSettings();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Toggles the settings panel\r\n   */\r\n  toggleSettings() {\r\n    if (this.psv.panel.prop.contentId === SettingsPlugin.ID_PANEL) {\r\n      this.hideSettings();\r\n    }\r\n    else {\r\n      this.showSettings();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Hides the settings panel\r\n   */\r\n  hideSettings() {\r\n    this.psv.panel.hide(SettingsPlugin.ID_PANEL);\r\n  }\r\n\r\n  /**\r\n   * @summary Shows the settings panel\r\n   */\r\n  showSettings() {\r\n    this.psv.panel.show({\r\n      id          : SettingsPlugin.ID_PANEL,\r\n      content     : SettingsPlugin.SETTINGS_TEMPLATE(\r\n        this.settings,\r\n        this.psv.config.lang[SettingsButton.id],\r\n        utils.dasherize(SettingsPlugin.SETTING_DATA)\r\n      ),\r\n      noMargin    : true,\r\n      clickHandler: (e) => {\r\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\r\n        const settingId = li ? li.dataset[SettingsPlugin.SETTING_DATA] : undefined;\r\n        const setting = this.settings.find(s => s.id === settingId);\r\n\r\n        if (setting) {\r\n          switch (setting.type) {\r\n            case 'toggle':\r\n              setting.toggle();\r\n              this.showSettings();\r\n              break;\r\n\r\n            case 'options':\r\n              this.__showOptions(setting);\r\n              break;\r\n\r\n            default:\r\n            // noop\r\n          }\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @summary Shows setting options panel\r\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\r\n   * @private\r\n   */\r\n  __showOptions(setting) {\r\n    this.psv.panel.show({\r\n      id          : SettingsPlugin.ID_PANEL,\r\n      content     : SettingsPlugin.SETTING_OPTIONS_TEMPLATE(\r\n        setting,\r\n        this.psv.config.lang[SettingsButton.id],\r\n        utils.dasherize(SettingsPlugin.SETTING_DATA)\r\n      ),\r\n      noMargin    : true,\r\n      clickHandler: (e) => {\r\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\r\n        const optionId = li ? li.dataset[SettingsPlugin.SETTING_DATA] : undefined;\r\n\r\n        if (optionId === '__back') {\r\n          this.showSettings();\r\n        }\r\n        else {\r\n          setting.apply(optionId);\r\n          this.hideSettings();\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n}\r\n"],"names":["SettingsButton","navbar","plugin","psv","getPlugin","SettingsPlugin","id","on","CONSTANTS","EVENTS","OPEN_PANEL","CLOSE_PANEL","destroy","off","isSupported","handleEvent","e","type","toggleActive","args","ID_PANEL","onClick","toggleSettings","AbstractButton","icon","DEFAULTS","splice","indexOf","lang","registerButton","settings","addSetting","setting","PSVError","SETTINGS_TEMPLATE_","push","panel","prop","contentId","showSettings","removeSetting","idx","some","i","hideSettings","hide","show","content","SETTINGS_TEMPLATE","config","utils","dasherize","SETTING_DATA","noMargin","clickHandler","li","target","getClosest","undefined","settingId","dataset","find","s","toggle","__showOptions","SETTING_OPTIONS_TEMPLATE","optionId","apply","AbstractPlugin","title","dataKey","map","join","options","label","current","chevron","active","switchOn","switchOff","check"],"mappings":"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"}