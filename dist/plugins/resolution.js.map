{"version":3,"file":"resolution.js","sources":["../../src/plugins/resolution/utils.js","../../src/plugins/resolution/index.js"],"sourcesContent":["/**\r\n * @summary Returns deep equality between objects\r\n * {@link https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9}\r\n * @param obj1\r\n * @param obj2\r\n * @return {boolean}\r\n * @private\r\n */\r\nexport function deepEqual(obj1, obj2) {\r\n  if (obj1 === obj2) {\r\n    return true;\r\n  }\r\n  else if (isObject(obj1) && isObject(obj2)) {\r\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n      return false;\r\n    }\r\n    for (const prop of Object.keys(obj1)) {\r\n      if (!deepEqual(obj1[prop], obj2[prop])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction isObject(obj) {\r\n  return typeof obj === 'object' && obj != null;\r\n}\r\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError } from 'photo-sphere-viewer';\r\nimport SettingsPlugin from 'photo-sphere-viewer/dist/plugins/settings';\r\nimport { deepEqual } from './utils';\r\n\r\n\r\nDEFAULTS.lang.resolution = 'Quality';\r\n\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Resolution\r\n * @property {string} id\r\n * @property {string} label\r\n * @property {string|string[]|PSV.Cubemap} panorama\r\n */\r\n\r\n/**\r\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Options\r\n * @property {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions - list of available resolutions\r\n */\r\n\r\n/**\r\n * @summary Adds a setting to choose between multiple resolutions of the panorama.\r\n * @extends PSV.plugins.AbstractPlugin\r\n * @memberof PSV.plugins\r\n */\r\nexport default class ResolutionPlugin extends AbstractPlugin {\r\n\r\n  static id = 'resolution';\r\n\r\n  /**\r\n   * @summary Available events\r\n   * @enum {string}\r\n   * @memberof PSV.plugins.ResolutionPlugin\r\n   * @constant\r\n   */\r\n  static EVENTS = {\r\n    /**\r\n     * @event resolution-changed\r\n     * @memberof PSV.plugins.ResolutionPlugin\r\n     * @summary Triggered when the resolution is changed\r\n     * @param {string} resolutionId\r\n     */\r\n    RESOLUTION_CHANGED: 'resolution-changed',\r\n  };\r\n\r\n  /**\r\n   * @param {PSV.Viewer} psv\r\n   * @param {PSV.plugins.ResolutionPlugin.Options} options\r\n   */\r\n  constructor(psv, options) {\r\n    super(psv);\r\n\r\n    /**\r\n     * @type {PSV.plugins.SettingsPlugin}\r\n     * @readonly\r\n     * @private\r\n     */\r\n    this.settings = SettingsPlugin ? psv.getPlugin(SettingsPlugin) : null;\r\n\r\n    if (!this.settings) {\r\n      throw new PSVError('Resolution plugin requires the Settings plugin');\r\n    }\r\n\r\n    this.settings.addSetting({\r\n      id     : ResolutionPlugin.id,\r\n      type   : 'options',\r\n      label  : this.psv.config.lang.resolution,\r\n      current: () => (this.prop.resolution ? this.resolutionsById[this.prop.resolution].label : ''),\r\n      options: () => this.__getSettingsOptions(),\r\n      apply  : resolution => this.setResolution(resolution),\r\n    });\r\n\r\n    /**\r\n     * @summary Available resolutions\r\n     * @member {PSV.plugins.ResolutionPlugin.Resolution[]}\r\n     */\r\n    this.resolutions = [];\r\n\r\n    /**\r\n     * @summary Available resolutions\r\n     * @member {Object.<string, PSV.plugins.ResolutionPlugin.Resolution>}\r\n     * @private\r\n     */\r\n    this.resolutionsById = {};\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @property {string} resolution - Current resolution\r\n     * @private\r\n     */\r\n    this.prop = {\r\n      resolution: null,\r\n    };\r\n\r\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\r\n\r\n    if (options?.resolutions) {\r\n      this.setResolutions(options.resolutions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @package\r\n   */\r\n  destroy() {\r\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\r\n\r\n    this.settings.removeSetting(SettingsPlugin.id);\r\n\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * @summary Handles events\r\n   * @param {Event} e\r\n   * @private\r\n   */\r\n  handleEvent(e) {\r\n    if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\r\n      this.__refreshResolution();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the available resolutions\r\n   * @param {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions\r\n   */\r\n  setResolutions(resolutions) {\r\n    this.resolutions = resolutions;\r\n    this.resolutionsById = {};\r\n\r\n    resolutions.forEach((resolution) => {\r\n      if (!resolution.id) {\r\n        throw new PSVError('Missing resolution id');\r\n      }\r\n      this.resolutionsById[resolution.id] = resolution;\r\n    });\r\n\r\n    this.__refreshResolution();\r\n  }\r\n\r\n  /**\r\n   * @summary Changes the current resolution\r\n   * @param {string} id\r\n   */\r\n  setResolution(id) {\r\n    if (!this.resolutionsById[id]) {\r\n      throw new PSVError(`Resolution ${id} unknown`);\r\n    }\r\n\r\n    return this.psv.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\r\n  }\r\n\r\n  /**\r\n   * @summary Returns the current resolution\r\n   * @return {string}\r\n   */\r\n  getResolution() {\r\n    return this.prop.resolution;\r\n  }\r\n\r\n  /**\r\n   * @summary Updates current resolution on panorama load\r\n   * @private\r\n   */\r\n  __refreshResolution() {\r\n    const resolution = this.resolutions.find(r => deepEqual(this.psv.config.panorama, r.panorama));\r\n    if (this.prop.resolution !== resolution?.id) {\r\n      this.prop.resolution = resolution?.id;\r\n      this.trigger(ResolutionPlugin.EVENTS.RESOLUTION_CHANGED, this.prop.resolution);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Returns options for Settings plugin\r\n   * @return {PSV.plugins.SettingsPlugin.Option[]}\r\n   * @private\r\n   */\r\n  __getSettingsOptions() {\r\n    return this.resolutions\r\n      .map(resolution => ({\r\n        type  : 'button',\r\n        id    : resolution.id,\r\n        active: resolution.id === this.prop.resolution,\r\n        label : resolution.label,\r\n      }));\r\n  }\r\n\r\n}\r\n"],"names":["deepEqual","obj1","obj2","isObject","Object","keys","length","prop","obj","DEFAULTS","lang","resolution","ResolutionPlugin","psv","options","settings","SettingsPlugin","getPlugin","PSVError","addSetting","id","type","label","config","current","resolutionsById","__getSettingsOptions","apply","setResolution","resolutions","on","CONSTANTS","EVENTS","PANORAMA_LOADED","setResolutions","destroy","off","removeSetting","handleEvent","e","__refreshResolution","forEach","setPanorama","panorama","transition","showLoader","getResolution","find","r","trigger","RESOLUTION_CHANGED","map","active","AbstractPlugin"],"mappings":"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"}